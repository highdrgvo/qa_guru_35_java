package ru.serple;

import java.util.List;

public class Main {
    public static void main(String[] args) {

        // Целочисленные типы
        byte aByte = 0; // 8b -128 + 127
        short aShort = 0; // 16b -32768 + 32767
        int aInt = 0; // 32b (-2^32).. (+2^32-1)
        Integer intWrapper = 1; // Это нужно для того, чтобы вообще не использовать никакие примитивные типы данных. Так очень важно писать для тестов. В List мы можем только Integer использовать, int нет
        // Что такое литерал?

        long aLong = 0; // 64b

        // Типы с плавающей точкой
        float aFloat = 0.0F;
        double aDouble = 0.0; // В основном это будет использоваться
        Double doubleWrapper = 8.1;
        // Символьный
        char aChar = 'a'; // про символьные надо почитать
        Character characterWrapper = 'a';

        // Логический тип
        boolean aBoolean = true; // Является ли что-то истиной или ложью

        // Из этих маленьких кирпичиков состоит любая java программа

        // Строка
        String toBePrint = "Hello World!"; // Почему белый, а не оранжевый? Почему с большой буквы String? Потому что это класс. Класс - это означает, что я описываю новый тип данных в моей программе. Про это тоже почитать.
        // Как появились классы?

        List<String> teachers = List.of("Stas", "Dima");

        // Классы созданы для того, чтобы описывать новые типы данных, которые своим описанием дают понять, че это за тип данных. Идея классов, чтобы сгруппировать маленькие кусочки данных в новую большую структуру данных с понятным названием.
        class Cup {
            String color = "grey";
            int capacity = 250;
            boolean hasHandle = true;
        }

        // Операторы - позволяют манипулировать данными
        // Оператор присвоения '='  String name = "Serg";
        String name = "Serg";
        int age = 24;
        // Арифметические операторы: + - / * % (остаток от деления) ++ --
        System.out.println(5/3); // при делении целочисленных, остаток отбрасывается

        // Операторы сравнения <, >, >=, <=, !=, ==
        System.out.println(5 > 3); // вернется true или false

        // Логические операторы & (и), | (или), && (сокращенное и), ||, !

        System.out.println(name.equals("Serg") && age == 24); // Почему & а не &&? && не вычисляет остаток выражения, если результат уже известен. Если name != Serg, он дальше даже не будет проверять. Лучше его всегда использовать.

        System.out.println(!(name.equals("Serg"))); // В библиотеке может не быть действия notequals, поэтому может понадобиться !

        // Оператор instanceof - проверяет тип данных (придет boolean тип данных)

        // Тернарный оператор - аналог if. Позволяет что-то проверить, прежде чем что-то сделать. Лучше использовать if.
        char sex = 'm';
        String childName = sex == 'm'
                ? "Valentin"
                : "Valentina";

        // Управляющая конструкция if
        if (sex == 'm') {
            childName = "Valentin";
        } else {
            childName = "Valentina"; // Можно без else
        }

        // Почитать про приоритеты операторов

        // ключевое слово new. Оно существует для того, чтобы создавать в джава программе объекты. Объект - это значение, которое будет хранить в себе данные, описанные в каком-то классе.

       //  String name = new String("Sergey");
       // String name = "Sergey"; // Для String можно не использовать new, для всех остальных - обязательно. В тестах нет new, которые мы писали. Оно прячется от нас за вызовом статических методов. В тестах есть open (там внутри вся магия происходит). New создает объект, дает им жизнь.
       // Вещественные числа — это числа, у которых есть дробная часть (она может быть нулевой). Они могут быть положительными или отрицательными.

       // For цикл используется следующим образом:
        // for(<начальная точка>; <условие выхода>; <операторы счетчика>) {
        //    Тело цикла }
        //Пример перебора цифр от 0 до 5 и вывод каждой в консоль:
        //for(int i = 0; i < 5; i++) {
        //   System.out.println(i);
        //}
        // Пояснение: Создай переменную i с начальным значением 0, пока она не достигнет 5, прибавляй к ней по 1 и на каждом шаге записывай значение i в консоль.


        System.out.println("Hello, World!");
    }
}