plugins {
    id 'java'
    id("io.qameta.allure") version '2.12.0'
}

group = 'ru.serple'
version = '1.0-SNAPSHOT'


allure {
    report {
        version.set('2.30.0') // Версия Allure Report . Подсветка .set() Если IDE подсвечивает .set() серым, это означает, что можно использовать более краткую форму. Но оба варианта (.set() и прямое присваивание) рабочие.
    }
    adapter { // Отвечает за появление папки allure-results в build слева.
        aspectjWeaver.set(true); // Включение AspectJ для @Step, @Attachment
        frameworks {
            junit5 {
                adapterVersion.set("2.19.0") // Должно совпадать с allure-junit5
            }
        }
    }
}


repositories {
    mavenCentral()
}

dependencies {

    testImplementation (
            'org.junit.jupiter:junit-jupiter:5.11.4', // библиотека jUnit
            'com.codeborne:selenide:7.7.1',
            'com.github.javafaker:javafaker:1.0.2',
            'io.qameta.allure:allure-junit5:2.19.0',
            'io.qameta.allure:allure-selenide:2.29.1',
            'org.aspectj:aspectjweaver:1.9.24'

    )
}

//test {
//    useJUnitPlatform()
//}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties()) // Вот эта строчка необходима для работы. Эта строчка помогает нам считывать переменные (-Dbrowser=chrome)

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task jenkins_properties(type: Test) {
    useJUnitPlatform {
        includeTags("jenkinsProperties")
    }
}

task simple_test(type: Test) {
    useJUnitPlatform {
        includeTags("simple")
    }
}

task demoqa_test(type: Test) {
    useJUnitPlatform {
        includeTags("demoqa")
    }
}

task remote_test(type: Test) {
    useJUnitPlatform {
        includeTags("remoteTest")
    }
}

task hello_test(type: Test) {
    useJUnitPlatform {
        includeTags("hello")
    }
}